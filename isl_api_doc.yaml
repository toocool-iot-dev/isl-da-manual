openapi: 3.0.0
info:
  title: Impact Solar Data Aggregator API documentation 2
  version: 1.6.0
  description: 
    $ref: ./README.md
  termsOfService: To be defined
  contact:
    name: Impact Solar 
    url: https://impact.api.team.xxxx
    email: hs3urj@gmail.com
  license:
    name: ISL
    url: xxxxxx
servers:
  - url: http://35.240.165.193:3003/v1
paths:
  /auth/register:
    post:
      summary: Register as user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                  description: must be unique
                password:
                  type: string
                  format: password
                  minLength: 8
                  description: At least one number and one letter
              example:
                name: fake name
                email: fake@example.com
                password: password1
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  tokens:
                    $ref: '#/components/schemas/AuthTokens'
        '400':
          $ref: '#/components/responses/DuplicateEmail'
  /auth/login:
    post:
      summary: Login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              example:
                email: hs3urj@gmail.com
                password: isl@12345
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  tokens:
                    $ref: '#/components/schemas/AuthTokens'
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 401
                message: Invalid email or password
  /auth/logout:
    post:
      summary: Logout
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
              example:
                refreshToken: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
      responses:
        '204':
          description: No content
        '404':
          $ref: '#/components/responses/NotFound'
  /auth/refresh-tokens:
    post:
      summary: Refresh auth tokens
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
              example:
                refreshToken: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/forgot-password:
    post:
      summary: Forgot password
      description: An email will be sent to reset password.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
              example:
                email: fake@example.com
      responses:
        '204':
          description: No content
        '404':
          $ref: '#/components/responses/NotFound'
  /auth/reset-password:
    post:
      summary: Reset password
      tags:
        - Auth
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
          description: The reset password token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  format: password
                  minLength: 8
                  description: At least one number and one letter
              example:
                password: password1
      responses:
        '204':
          description: No content
        '401':
          description: Password reset failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 401
                message: Password reset failed
  /device:
    post:
      summary: Create a device data
      description: Only admins can create device data.
      tags:
        - Device
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                brand:
                  type: string
              example:
                name: Inverter
                brand: SolarEdge
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    get:
      summary: Get all devices
      description: Only admins can retrieve all devices.
      tags:
        - Device
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: sortBy
          schema:
            type: string
          description: sort by query in the form of field:desc/asc (ex. name:asc)
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
          example: 10
          description: Maximum number of devices
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: name
          schema:
            type: string
          description: Device name
        - in: query
          name: brand
          schema:
            type: string
          description: Device brand
        - in: query
          name: siteId
          schema:
            type: string
          description: Site Id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Device'
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
                  totalPages:
                    type: integer
                    example: 1
                  totalResults:
                    type: integer
                    example: 1
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /device/{id}:
    get:
      summary: Get a device by id
      description: >-
        Logged in devices can fetch only their own device information. Only
        admins can fetch other devices.
      tags:
        - Device
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Device ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update a device by id
      description: >-
        Logged in devices can only update their own information. Only admins can
        update other devices.
      tags:
        - Device
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Device ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                  description: must be unique
                password:
                  type: string
                  format: password
                  minLength: 8
                  description: At least one number and one letter
              example:
                name: Inverter_1
                brand: SolarEdge
                siteId: 610b569d533d03103fbe6597
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a device by id
      description: >-
        Logged in devices can delete only themselves. Only admins can delete
        other devices.
      tags:
        - Device
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Device ID
      responses:
        '200':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /device/{id}/api:
    patch:
      summary: Update a device's API info
      description: >-
        Logged in devices can only update their own information. Only admins can
        update other devices.
      tags:
        - Device
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Device ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                site_id:
                  type: string
                api_key:
                  type: string
              example:
                site_id: 1417548
                api_key: LHKFO19EW9VCOEZHAOFBAIL3S8L3PJWA
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /device/{id}/energy/init:
    get:
      summary: >-
        Initialize device to get historical energy data from device's dedicated
        API server
      description: >-
        Logged in devices can fetch only their own device information. Only
        admins can fetch other devices.
      tags:
        - Device
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Device ID
          example: 6099c89cf0e1aed3e139d506
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /isl/device:
    post:
      summary: Create a device data
      description: Only admins can create device data.
      tags:
        - ISL
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
              example:
                name: Inverter
                brand: SolarEdge
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/DuplicateEmail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    get:
      summary: Get all devices
      description: Get all devices in ISL database.
      tags:
        - ISL
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /isl/device/{deviceId}:
    get:
      summary: Get device data by id
      description: Get device's details from ISL database that match the specific params.
      tags:
        - ISL
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
          description: Device ID
          example: 6099c89cf0e1aed3e139d506
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update a device by id
      description: >-
        Logged in devices can only update their own information. Only admins can
        update other devices.
      tags:
        - ISL
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
          description: Device ID
          example: 60acbe42cd5bf576e942a7cc
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                  description: must be unique
                password:
                  type: string
                  format: password
                  minLength: 8
                  description: At least one number and one letter
              example:
                brand:
                  name: SolarEdge
                  description: SolarEdge device family
                productModel:
                  name: 3EK
                  description: 3kW Inverter
                apiInfo:
                  site_id: '1417548'
                  api_address: https://monitoringapi.solaredge.com/
                  api_key: LHKFO19EW9VCOEZHAOFBAIL3S8L3PJWA
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/DuplicateEmail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /isl/data/{deviceId}/{meterType}/{dataType}/datetime:
    post:
      summary: Get a device energy data within time range
      description: Get [dataType] from [deviceId] from [startDate] to [endDate].
      tags:
        - ISL
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
          description: Device ID (SolarEdge)
          example: 6099c3baa562cbd1b3bd5393
        - in: path
          name: meterType
          required: true
          schema:
            type: string
          description: Meter type
          example: Inverter
        - in: path
          name: dataType
          required: true
          schema:
            type: string
          description: Data type
          example: ExportedEnergy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              startDate: '2021-05-01 00:00:00'
              endDate: '2021-05-02 16:00:00'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ISLData'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/DateConflict'
  /isl/data/{deviceId}/{dataType}/datetime:
    post:
      summary: Get a device non-energy data within time range
      description: Get [dataType] from [deviceId] from [startDate] to [endDate].
      tags:
        - ISL
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
          description: Device ID (SolarEdge)
          example: 6099c3baa562cbd1b3bd5393
        - in: path
          name: dataType
          required: true
          schema:
            type: string
          description: Data type
          example: Temperature
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              startDate: '2021-05-01 00:00:00'
              endDate: '2021-05-02 16:00:00'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ISLData'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/DateConflict'
  /site:
    post:
      summary: Create a client site data
      description: Only admins can create site data.
      tags:
        - Site
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
              example:
                name: BigC2
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    get:
      summary: Get all client sites
      description: Only admins can retrieve all sites.
      tags:
        - Site
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: sortBy
          schema:
            type: string
          description: sort by query in the form of field:desc/asc (ex. name:asc)
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
          example: 10
          description: Maximum number of sites
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Site'
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
                  totalPages:
                    type: integer
                    example: 1
                  totalResults:
                    type: integer
                    example: 1
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /site/{id}:
    get:
      summary: Get a site by id
      description: >-
        Logged in sites can fetch only their own site information. Only admins
        can fetch other sites.
      tags:
        - Site
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Site ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update a site by id
      description: >-
        Logged in sites can only update their own information. Only admins can
        update other sites.
      tags:
        - Site
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Site ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                  description: must be unique
                password:
                  type: string
                  format: password
                  minLength: 8
                  description: At least one number and one letter
              example:
                brand:
                  name: SolarEdge
                  description: SolarEdge site family
                productModel:
                  name: 3EK
                  description: 3kW Inverter
                apiInfo:
                  site_id: '1417548'
                  api_address: https://monitoringapi.solaredge.com/
                  api_key: LHKFO19EW9VCOEZHAOFBAIL3S8L3PJWA
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
        '400':
          $ref: '#/components/responses/DuplicateEmail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a site by id
      description: >-
        Logged in sites can delete only themselves. Only admins can delete other
        sites.
      tags:
        - Site
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Site ID
      responses:
        '200':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /site/{id}/energy:
    get:
      summary: Get a site's energy data
      description: >-
        Logged in sites can fetch only their own site information. Only admins
        can fetch other sites.
      tags:
        - Site
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Site ID
          example: 6099c89cf0e1aed3e139d506
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /user:
    post:
      summary: Create a user
      description: Only admins can create other users.
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - role
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                  description: must be unique
                password:
                  type: string
                  format: password
                  minLength: 8
                  description: At least one number and one letter
                role:
                  type: string
                  enum:
                    - user
                    - admin
              example:
                name: fake name
                email: fake@example.com
                password: password1
                role: user
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/DuplicateEmail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    get:
      summary: Get all users
      description: Only admins can retrieve all users.
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: User name
        - in: query
          name: role
          schema:
            type: string
          description: User role
        - in: query
          name: sortBy
          schema:
            type: string
          description: sort by query in the form of field:desc/asc (ex. name:asc)
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
          example: 10
          description: Maximum number of users
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
                  totalPages:
                    type: integer
                    example: 1
                  totalResults:
                    type: integer
                    example: 1
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /user/{id}:
    get:
      summary: Get a user by id
      description: >-
        Logged in users can fetch only their own user information. Only admins
        can fetch other users.
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update a user by id
      description: >-
        Logged in users can only update their own information. Only admins can
        update other users.
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                  description: must be unique
                password:
                  type: string
                  format: password
                  minLength: 8
                  description: At least one number and one letter
              example:
                name: fake name
                email: fake@example.com
                password: password1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/DuplicateEmail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a user by id
      description: >-
        Logged in users can delete only themselves. Only admins can delete other
        users.
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User id
      responses:
        '200':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum:
            - user
            - admin
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user
    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: >-
          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: '2020-05-12T16:18:04.793Z'
    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'
    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
    Device:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        brand:
          type: string
        apiInfo:
          type: object
          properties:
            site_id:
              type: string
            entity_id:
              type: string
            station_code:
              type: string
            username:
              type: string
            password:
              type: string
            api_address:
              type: string
            api_key:
              type: string
        zone:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
      example:
        Id: 5fcea667d9f73982197c0770
        name: Inverter_1
        brand: SolarEdge
    ISLData:
      type: object
      properties:
        data_type:
          type: string
        datetime:
          type: string
        value:
          type: string
        unit:
          type: string
        deviceId:
          type: string
      example:
        data_type: ExportedEnergy
        datetime: '2021-05-01 22:15:00'
        value: '123.45'
        unit: kWh
        deviceId: 6099c3baa562cbd1b3bd5393
    Site:
      type: object
      properties:
        name:
          type: string
      example:
        name: BigC2
  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found
    DateConflict:
      description: Date conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 409
            message: End date is before start date
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
  - name: Auth
    description: Authentication
  - name: Device
    description: Device data management and retrieval
  - name: ISL
    description: ISL data management and retrieval. These APIs are identical to the Devices APIs. Only URL address that are grouped into API syntax of ISL for convenient request by user.
  - name: Site
    description: Client site management and retrieval
  - name: User
    description: User management and retrieval
